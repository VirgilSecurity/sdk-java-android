/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.virgilsecurity.crypto;

public class VirgilChunkCipher extends VirgilCipherBase implements java.lang.AutoCloseable {
  private long swigCPtr;

  protected VirgilChunkCipher(long cPtr, boolean cMemoryOwn) {
    super(virgil_crypto_javaJNI.VirgilChunkCipher_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(VirgilChunkCipher obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        virgil_crypto_javaJNI.delete_VirgilChunkCipher(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  @Override
  public void close() {
    delete();
  }

  public long startEncryption(long preferredChunkSize) {
    return virgil_crypto_javaJNI.VirgilChunkCipher_startEncryption__SWIG_0(swigCPtr, this, preferredChunkSize);
  }

  public long startEncryption() {
    return virgil_crypto_javaJNI.VirgilChunkCipher_startEncryption__SWIG_1(swigCPtr, this);
  }

  public long startDecryptionWithKey(byte[] recipientId, byte[] privateKey, byte[] privateKeyPassword) {
    return virgil_crypto_javaJNI.VirgilChunkCipher_startDecryptionWithKey__SWIG_0(swigCPtr, this, recipientId, privateKey, privateKeyPassword);
  }

  public long startDecryptionWithKey(byte[] recipientId, byte[] privateKey) {
    return virgil_crypto_javaJNI.VirgilChunkCipher_startDecryptionWithKey__SWIG_1(swigCPtr, this, recipientId, privateKey);
  }

  public long startDecryptionWithPassword(byte[] pwd) {
    return virgil_crypto_javaJNI.VirgilChunkCipher_startDecryptionWithPassword(swigCPtr, this, pwd);
  }

  public byte[] process(byte[] data) {
    return virgil_crypto_javaJNI.VirgilChunkCipher_process(swigCPtr, this, data);
  }

  public void finish() {
    virgil_crypto_javaJNI.VirgilChunkCipher_finish(swigCPtr, this);
  }

  public VirgilChunkCipher() {
    this(virgil_crypto_javaJNI.new_VirgilChunkCipher(), true);
  }

  public final static int kPreferredChunkSize = virgil_crypto_javaJNI.VirgilChunkCipher_kPreferredChunkSize_get();

}
